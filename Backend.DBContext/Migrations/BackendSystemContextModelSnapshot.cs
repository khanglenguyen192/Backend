// <auto-generated />
using System;
using Backend.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.DBContext.Migrations
{
    [DbContext(typeof(BackendSystemContext))]
    partial class BackendSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Backend.Entities.CashAdvance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("Cash")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Month")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CashAdvance");
                });

            modelBuilder.Entity("Backend.Entities.CompanyEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TargetObject")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyEvent");
                });

            modelBuilder.Entity("Backend.Entities.CurrencyExchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("Rate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CurrencyExchange");
                });

            modelBuilder.Entity("Backend.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DepartmentLogo")
                        .HasColumnType("longtext");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Backend.Entities.DepartmentMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ParentDepartmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("DepartmentMap");
                });

            modelBuilder.Entity("Backend.Entities.DepartmentUserMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("DepartmentUserMap");
                });

            modelBuilder.Entity("Backend.Entities.FilePolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDirectory")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FilePolicy");
                });

            modelBuilder.Entity("Backend.Entities.HardCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("ParentId")
                        .HasColumnType("longtext");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HardCode");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3779),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserRole",
                            ParentId = "",
                            Value = 0
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3789),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Administrator",
                            ParentId = "UserRole",
                            Value = 1
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3797),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Manager",
                            ParentId = "UserRole",
                            Value = 2
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3804),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee",
                            ParentId = "UserRole",
                            Value = 3
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3811),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Interns",
                            ParentId = "UserRole",
                            Value = 5
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3822),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Probationer",
                            ParentId = "UserRole",
                            Value = 4
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3829),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Collaborators",
                            ParentId = "UserRole",
                            Value = 6
                        },
                        new
                        {
                            Id = 20,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3836),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gender",
                            ParentId = "",
                            Value = 0
                        },
                        new
                        {
                            Id = 21,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3844),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nam",
                            ParentId = "Gender",
                            Value = 1
                        },
                        new
                        {
                            Id = 22,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3903),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nữ",
                            ParentId = "Gender",
                            Value = 2
                        },
                        new
                        {
                            Id = 23,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3911),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Khác",
                            ParentId = "Gender",
                            Value = 3
                        },
                        new
                        {
                            Id = 41,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3919),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DayOffOption",
                            ParentId = "",
                            Value = 0
                        },
                        new
                        {
                            Id = 42,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3926),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cả ngày",
                            ParentId = "DayOffOption",
                            Value = 1
                        },
                        new
                        {
                            Id = 43,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3934),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sáng",
                            ParentId = "DayOffOption",
                            Value = 2
                        },
                        new
                        {
                            Id = 44,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3941),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chiều",
                            ParentId = "DayOffOption",
                            Value = 3
                        },
                        new
                        {
                            Id = 45,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3948),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ProjectStatus",
                            ParentId = "",
                            Value = 0
                        },
                        new
                        {
                            Id = 47,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3956),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Đang hoạt động",
                            ParentId = "ProjectStatus",
                            Value = 1
                        },
                        new
                        {
                            Id = 48,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3965),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tạm dừng",
                            ParentId = "ProjectStatus",
                            Value = 2
                        },
                        new
                        {
                            Id = 49,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3973),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Đã hoàn thành",
                            ParentId = "ProjectStatus",
                            Value = 3
                        },
                        new
                        {
                            Id = 50,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3980),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "HolidayType",
                            ParentId = "",
                            Value = 0
                        },
                        new
                        {
                            Id = 51,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3987),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ngày nghỉ cố định",
                            ParentId = "HolidayType",
                            Value = 1
                        },
                        new
                        {
                            Id = 52,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3994),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ngày nghỉ không cố định",
                            ParentId = "HolidayType",
                            Value = 2
                        },
                        new
                        {
                            Id = 53,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4002),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ngày nghỉ do công ty quy định",
                            ParentId = "HolidayType",
                            Value = 3
                        },
                        new
                        {
                            Id = 54,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4009),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OvertimeRateType",
                            ParentId = "",
                            Value = 0
                        },
                        new
                        {
                            Id = 55,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4016),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "x2",
                            ParentId = "OvertimeRateType",
                            Value = 2
                        },
                        new
                        {
                            Id = 56,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4024),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "x3",
                            ParentId = "OvertimeRateType",
                            Value = 3
                        },
                        new
                        {
                            Id = 57,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4031),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SalaryType",
                            ParentId = "",
                            Value = 0
                        },
                        new
                        {
                            Id = 58,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4038),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "NET",
                            ParentId = "SalaryType",
                            Value = 1
                        },
                        new
                        {
                            Id = 59,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4046),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GROSS",
                            ParentId = "SalaryType",
                            Value = 2
                        },
                        new
                        {
                            Id = 60,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4053),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PARTTIME",
                            ParentId = "SalaryType",
                            Value = 3
                        },
                        new
                        {
                            Id = 61,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4061),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PROBATION",
                            ParentId = "SalaryType",
                            Value = 4
                        },
                        new
                        {
                            Id = 62,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4069),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AlertGroups",
                            ParentId = "",
                            Value = 0
                        },
                        new
                        {
                            Id = 63,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4076),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tất cả",
                            ParentId = "AlertGroups",
                            Value = 7
                        },
                        new
                        {
                            Id = 64,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4084),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Đã đọc",
                            ParentId = "AlertGroups",
                            Value = 8
                        },
                        new
                        {
                            Id = 65,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4091),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chưa đọc",
                            ParentId = "AlertGroups",
                            Value = 9
                        },
                        new
                        {
                            Id = 66,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4098),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tài khoản",
                            ParentId = "AlertGroups",
                            Value = 1
                        },
                        new
                        {
                            Id = 67,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4142),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ngày nghỉ",
                            ParentId = "AlertGroups",
                            Value = 3
                        },
                        new
                        {
                            Id = 68,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4150),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tin nhắn",
                            ParentId = "AlertGroups",
                            Value = 0
                        },
                        new
                        {
                            Id = 69,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4157),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Làm thêm giờ",
                            ParentId = "AlertGroups",
                            Value = 4
                        },
                        new
                        {
                            Id = 70,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4164),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dự án",
                            ParentId = "AlertGroups",
                            Value = 2
                        },
                        new
                        {
                            Id = 71,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4171),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sinh nhật",
                            ParentId = "AlertGroups",
                            Value = 5
                        },
                        new
                        {
                            Id = 72,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4178),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ứng lương",
                            ParentId = "AlertGroups",
                            Value = 6
                        },
                        new
                        {
                            Id = 73,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4186),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DepartmentStatus",
                            ParentId = "",
                            Value = 0
                        },
                        new
                        {
                            Id = 74,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4194),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Đang hoạt động",
                            ParentId = "DepartmentStatus",
                            Value = 1
                        },
                        new
                        {
                            Id = 75,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4201),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dừng hoạt động",
                            ParentId = "DepartmentStatus",
                            Value = 2
                        },
                        new
                        {
                            Id = 76,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4208),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sớm ra mắt",
                            ParentId = "DepartmentStatus",
                            Value = 3
                        },
                        new
                        {
                            Id = 85,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4215),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SpecialDayOff",
                            ParentId = "",
                            Value = 0
                        },
                        new
                        {
                            Id = 86,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4222),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kết hôn",
                            ParentId = "SpecialDayOff",
                            Value = 1
                        },
                        new
                        {
                            Id = 87,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4229),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Con đẻ, con nuôi kết hôn",
                            ParentId = "SpecialDayOff",
                            Value = 2
                        },
                        new
                        {
                            Id = 88,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4236),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nghỉ sinh con",
                            ParentId = "SpecialDayOff",
                            Value = 3
                        },
                        new
                        {
                            Id = 89,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4243),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nghỉ để tang",
                            ParentId = "SpecialDayOff",
                            Value = 4
                        });
                });

            modelBuilder.Entity("Backend.Entities.MeetingCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LeaderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.ToTable("MeetingCompany");
                });

            modelBuilder.Entity("Backend.Entities.MeetingUserMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("MeetingUserMap");
                });

            modelBuilder.Entity("Backend.Entities.NotifyMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlertGroups")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotifyMessage");
                });

            modelBuilder.Entity("Backend.Entities.OverTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Month")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OvertimeRateType")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeFinish")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("WorkTime")
                        .HasColumnType("double");

                    b.Property<double>("WorkTimeWithRate")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OverTime");
                });

            modelBuilder.Entity("Backend.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectLogo")
                        .HasColumnType("longtext");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Backend.Entities.ProjectOTMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OverTimeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OverTimeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectOTMap");
                });

            modelBuilder.Entity("Backend.Entities.ProjectUserMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLeader")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUserMap");
                });

            modelBuilder.Entity("Backend.Entities.RateOvertime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("RateOvertime");
                });

            modelBuilder.Entity("Backend.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Backend.Entities.ReportFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportFile");
                });

            modelBuilder.Entity("Backend.Entities.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.Property<string>("Template")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Reward");
                });

            modelBuilder.Entity("Backend.Entities.RewardUserMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.Property<int>("RewardStatus")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("RewardUserMap");
                });

            modelBuilder.Entity("Backend.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoleName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4258),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4271),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4280),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "Employee"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4288),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "Probationer"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4297),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "Interns"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(4306),
                            IsDeactivate = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "Collaborators"
                        });
                });

            modelBuilder.Entity("Backend.Entities.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("BHTN")
                        .HasColumnType("bigint");

                    b.Property<long>("BHTNCompulsory")
                        .HasColumnType("bigint");

                    b.Property<long>("BHXH")
                        .HasColumnType("bigint");

                    b.Property<long>("BHXHCompulsory")
                        .HasColumnType("bigint");

                    b.Property<long>("BHYT")
                        .HasColumnType("bigint");

                    b.Property<long>("BHYTCompulsory")
                        .HasColumnType("bigint");

                    b.Property<long>("BasicSalary")
                        .HasColumnType("bigint");

                    b.Property<long>("CashAdvance")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("HolidayBonus")
                        .HasColumnType("bigint");

                    b.Property<long>("HousingSupport")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsApprove")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("KPCD")
                        .HasColumnType("bigint");

                    b.Property<long>("LunchMoney")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Month")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("OTSalary")
                        .HasColumnType("bigint");

                    b.Property<long>("PIT")
                        .HasColumnType("bigint");

                    b.Property<long>("PITByEmployee")
                        .HasColumnType("bigint");

                    b.Property<long>("PITExcludingRent")
                        .HasColumnType("bigint");

                    b.Property<long>("PaidDayOff")
                        .HasColumnType("bigint");

                    b.Property<long>("PetrolMoney")
                        .HasColumnType("bigint");

                    b.Property<long>("RealSalary")
                        .HasColumnType("bigint");

                    b.Property<long>("ReduceYourself")
                        .HasColumnType("bigint");

                    b.Property<long>("SalaryCalculatedForBHTN")
                        .HasColumnType("bigint");

                    b.Property<long>("SalaryCalculatedForBHXHnBHYT")
                        .HasColumnType("bigint");

                    b.Property<long>("SalaryPerformance")
                        .HasColumnType("bigint");

                    b.Property<long>("SelfBHTN")
                        .HasColumnType("bigint");

                    b.Property<long>("SelfBHXH")
                        .HasColumnType("bigint");

                    b.Property<long>("SelfBHYT")
                        .HasColumnType("bigint");

                    b.Property<long>("TNConversionIncludingRent")
                        .HasColumnType("bigint");

                    b.Property<long>("Tax")
                        .HasColumnType("bigint");

                    b.Property<long>("TaxableIncome")
                        .HasColumnType("bigint");

                    b.Property<long>("TelephoneFee")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalAllowance")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalCP")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalCompulsoryInsurance")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalIncome")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalTax")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalTaxableIncome")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Salary");
                });

            modelBuilder.Entity("Backend.Entities.SpecialDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DayOffStatus")
                        .HasColumnType("int");

                    b.Property<int?>("HolidayType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPaidOff")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Option")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SpecialDay");
                });

            modelBuilder.Entity("Backend.Entities.SystemConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AbsenceSlackId")
                        .HasColumnType("longtext");

                    b.Property<string>("BirthdayEmailTemplate")
                        .HasColumnType("longtext");

                    b.Property<string>("CashAdvanceSlackId")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CelebratorDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CelebratorEmailTemplate")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DailyReportSlackId")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentTitle")
                        .HasColumnType("longtext");

                    b.Property<int>("ExpireToken")
                        .HasColumnType("int");

                    b.Property<string>("FavIcon")
                        .HasColumnType("longtext");

                    b.Property<string>("FooterText")
                        .HasColumnType("longtext");

                    b.Property<string>("ForgotPasswordEmailTemplate")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LoginBackground")
                        .HasColumnType("longtext");

                    b.Property<string>("Logo")
                        .HasColumnType("longtext");

                    b.Property<string>("MeetingSlackId")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OfficalSlackId")
                        .HasColumnType("longtext");

                    b.Property<string>("OfficeSlackId")
                        .HasColumnType("longtext");

                    b.Property<string>("OvertimeSlackId")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("RemindEmailTemplate")
                        .HasColumnType("longtext");

                    b.Property<string>("SalaryEmailTemplate")
                        .HasColumnType("longtext");

                    b.Property<long>("TimeRemind")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<string>("WorkFromHomeId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SystemConfig");
                });

            modelBuilder.Entity("Backend.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssigneeId")
                        .HasColumnType("int");

                    b.Property<int>("AssignorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("TeamsNoitifyId")
                        .HasColumnType("longtext");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("AssignorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Backend.Entities.TicketFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketFile");
                });

            modelBuilder.Entity("Backend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("BankAccount")
                        .HasColumnType("longtext");

                    b.Property<long>("BasicSalary")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateJoinCompany")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateStartContract")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FacebookId")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double>("HourSalary")
                        .HasColumnType("double");

                    b.Property<long>("HousingSupport")
                        .HasColumnType("bigint");

                    b.Property<string>("IdBackImage")
                        .HasColumnType("longtext");

                    b.Property<string>("IdFrontImage")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("IdIssueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IdIssuePlace")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsChangingPassword")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHardCode")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastLoginFail")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LinkedId")
                        .HasColumnType("longtext");

                    b.Property<long>("LunchMoney")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NumberOfDenpendents")
                        .HasColumnType("int");

                    b.Property<string>("PassCode")
                        .HasColumnType("longtext");

                    b.Property<long>("PetrolMoney")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<long>("ReduceYourself")
                        .HasColumnType("bigint");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<long>("SalaryCalculatedForBHTN")
                        .HasColumnType("bigint");

                    b.Property<long>("SalaryCalculatedForBHXHnBHYT")
                        .HasColumnType("bigint");

                    b.Property<int>("SalaryType")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .HasColumnType("longtext");

                    b.Property<string>("SkypeId")
                        .HasColumnType("longtext");

                    b.Property<string>("SlackId")
                        .HasColumnType("longtext");

                    b.Property<long>("TelephoneFee")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeZone")
                        .HasColumnType("longtext");

                    b.Property<double>("TotalDayOffInYear")
                        .HasColumnType("double");

                    b.Property<double>("TotalDayOffRemainInYear")
                        .HasColumnType("double");

                    b.Property<int>("TotalLoginFail")
                        .HasColumnType("int");

                    b.Property<long>("TotalTaxableIncome")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCode")
                        .HasColumnType("longtext");

                    b.Property<long>("UserIdentity")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasicSalary = 0L,
                            Birthday = new DateTime(2023, 5, 8, 10, 0, 6, 646, DateTimeKind.Utc).AddTicks(3095),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateJoinCompany = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStartContract = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "root@gmail.com",
                            FullName = "Lê Nguyên Khang",
                            Gender = 3,
                            HourSalary = 0.0,
                            HousingSupport = 0L,
                            IdIssueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsChangingPassword = false,
                            IsDeactivate = false,
                            IsFirstLogin = false,
                            IsHardCode = true,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastLoginFail = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LunchMoney = 0L,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDenpendents = 0,
                            PassCode = "4gCaQiDMvnCFGpzB3UXGbWZ0cxFeVAi69XbUtGNZRno=",
                            PetrolMoney = 0L,
                            Phone = "0349560351",
                            ReduceYourself = 0L,
                            Role = 1,
                            SalaryCalculatedForBHTN = 0L,
                            SalaryCalculatedForBHXHnBHYT = 0L,
                            SalaryType = 0,
                            Salt = "00000000-0000-0000-0000-000000000000",
                            SlackId = "BK2N33T8B/9lHXv9Ml0hKdjqgR0jPYcuqs",
                            TelephoneFee = 0L,
                            TotalDayOffInYear = 0.0,
                            TotalDayOffRemainInYear = 0.0,
                            TotalLoginFail = 0,
                            TotalTaxableIncome = 0L,
                            UserIdentity = 0L,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("Backend.Entities.UserChecking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CheckinNotes")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CheckoutNotes")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserChecking");
                });

            modelBuilder.Entity("Backend.Entities.CashAdvance", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entities.CompanyEvent", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entities.Department", b =>
                {
                    b.HasOne("Backend.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Backend.Entities.DepartmentMap", b =>
                {
                    b.HasOne("Backend.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entities.Department", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("Backend.Entities.DepartmentUserMap", b =>
                {
                    b.HasOne("Backend.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entities.MeetingCompany", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entities.MeetingUserMap", b =>
                {
                    b.HasOne("Backend.Entities.MeetingCompany", "MeetingCompany")
                        .WithMany()
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingCompany");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entities.NotifyMessage", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entities.OverTime", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entities.Project", b =>
                {
                    b.HasOne("Backend.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Backend.Entities.ProjectOTMap", b =>
                {
                    b.HasOne("Backend.Entities.OverTime", "OverTime")
                        .WithMany()
                        .HasForeignKey("OverTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OverTime");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Backend.Entities.ProjectUserMap", b =>
                {
                    b.HasOne("Backend.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entities.Report", b =>
                {
                    b.HasOne("Backend.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Backend.Entities.ReportFile", b =>
                {
                    b.HasOne("Backend.Entities.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Backend.Entities.RewardUserMap", b =>
                {
                    b.HasOne("Backend.Entities.Reward", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reward");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entities.Salary", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entities.SpecialDay", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entities.Ticket", b =>
                {
                    b.HasOne("Backend.Entities.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entities.User", "Assignor")
                        .WithMany()
                        .HasForeignKey("AssignorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Backend.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("Assignee");

                    b.Navigation("Assignor");

                    b.Navigation("Department");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Backend.Entities.TicketFile", b =>
                {
                    b.HasOne("Backend.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Backend.Entities.UserChecking", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
